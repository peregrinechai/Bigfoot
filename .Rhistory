plains <- c("Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota")
southeast <- c("Alabama", "Arkansas", "Florida", "Georgia", "Kentucky", "Louisiana", "Mississippi", "North Carolina", "South Carolina", "Tennessee", "Virginia", "West Virginia")
southwest <- c("Arizona", "New Mexico", "Oklahoma", "Texas")
rocky_mountains <- c("Colorado", "Idaho", "Montana", "Utah", "Wyoming")
far_west <- c("Alaska", "California", "Hawaii", "Nevada", "Oregon", "Washington")
bfro_og <- read_csv("bfro_reports_geocoded.csv")
colnames(bfro_og)
bfro <- bfro_og %>%
mutate(
region = case_when(state %in% far_west ~ "Far West",
state %in% rocky_mountains ~ "Rocky Mountains",
state %in% great_lakes ~ "Great Lakes",
state %in% plains ~ "Plains",
state %in% southeast ~ "Southeast",
state %in% mid_east ~ "Mid-East",
state %in% southwest ~ "Southwest",
state %in% new_england ~ "New England"),
year = year(date),
date = date(date),
monoyr = month(date),
vocalizations = (str_detect(title, "vocalization") | str_detect(observed, "vocalization")),
howls = str_detect(title, "howl") | str_detect(observed, "howl"),
knocks = str_detect(title, "knock") | str_detect(observed, "knock"),
visuals = str_detect(title, "sighting"),
footprints = str_detect(observed, "footprint") | str_detect(title, "footprint"),
whoops = str_detect(observed, "whoop") | str_detect(title, "whoop"),
rock_throw = str_detect(title, "rock throw") | str_detect(observed, "rock throw"),
being_watched = str_detect(observed, "being watched"),
watching_me = str_detect(observed, "watching me"),
quiet = str_detect(observed, "quiet"),
silent = str_detect(observed, "silent"),
silence = str_detect(observed, "silence"),
chatter = str_detect(observed, "chatter"),
clacking = (str_detect(title, "clack") | str_detect(observed, "clack")),
clicking = (str_detect(title, "click") | str_detect(observed, "click")),
quietude = ((quiet == TRUE) | (silent == TRUE) | (silence == TRUE)),
being_watched = ((being_watched == TRUE) | (watching_me == TRUE)),
sounds = ((vocalizations == TRUE) | (whoops == TRUE) | (chatter == TRUE) | (howls == TRUE)),
sense = case_when((sounds == TRUE) & (visuals == FALSE) ~ "Creature noises, no visual",
(sounds == TRUE) & (visuals == TRUE) ~ "Visual & creature noises",
(sounds == FALSE) & (visuals == TRUE) ~ "Visual, no creature noises",
(sounds == FALSE) & (visuals == FALSE) & ((rock_throw == TRUE) | (knocks == TRUE) | (clacking == TRUE) | (clicking == TRUE)) ~ "Only noises in surroundings")
) %>%
# filter(year > 1960) %>%
select(-c(quiet, silent, silence, watching_me, number, geohash))
dim(bfro)
# summarize(bfro, median_visibility = median(visibility, na.rm = TRUE), mean_visibility = mean(visibility, na.rm = TRUE), min_visibility = min(visibility, na.rm = TRUE), max_visibility = max(visibility, na.rm = TRUE))
# summarize(bfro, median_moon_phase = median(moon_phase, na.rm = TRUE), mean_moon_phase = mean(moon_phase, na.rm = TRUE), min_moon_phase = min(moon_phase, na.rm = TRUE), max_moon_phase = max(moon_phase, na.rm = TRUE))
# summarize(bfro, median_temperature_mid = median(temperature_mid, na.rm = TRUE), mean_temperature_mid = mean(temperature_mid, na.rm = TRUE), min_temperature_mid = min(temperature_mid, na.rm = TRUE), max_temperature_mid = max(temperature_mid, na.rm = TRUE))
# ggplot(bfro %>%
#          filter(footprints == TRUE) %>%
#            count(state) %>%
#            slice_max(n, n=10),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="lightgreen") +
#     labs(x = "State", y = "Footprint Reports", title = "Top 10 States for Footprint Reports", subtitle = "California, Washington lead in reports of Sasquatch footprints") +
#     scale_fill_brewer(palette = "Set1") +
# #  geom_text(aes(label= n), hjust = 1.5, color = "black") +
#   theme_void() +
#   geom_text(aes(label = paste0(state, " (", n, ")"),
#                 hjust = ifelse(n > 26, 1.08, -0.25))) +
#     coord_flip()
#
#
# top5states<- ggplot(bfro %>%
#            count(state) %>%
#            slice_max(n, n=5),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="pink") +
#     labs(x = "State", y = "Reports", title = "Top 5 States for Bigfoot Reports", subtitle = "Washington leads in total reports of Sasquatch") +
#     scale_fill_brewer(palette = "Set1") +
# #  geom_text(aes(label= n), hjust = 1.5, color = "black") +
#   theme_void() +
#   geom_text(aes(label = paste0(state, " (", n, ")"),
#                 hjust = ifelse(n > 26, 1.08, -0.25))) +
#     coord_flip()
#
# top5states
# ggplot(bfro %>%
#          filter(knocks == TRUE) %>%
#            count(state) %>%
#            slice_max(n, n=5),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="lightgreen") +
#     labs(x = "State", y = "Knocking Reports", title = "Top 5 States for Knocking Reports", subtitle = "Washington leads in reports of Sasquatch knocking sounds") +
#     scale_fill_brewer(palette = "Set1") +
#   geom_text(aes(label= n), hjust = 1.5, color = "black") +
# #  theme_void() +
#     coord_flip()
# ggplot(bfro %>%
#          filter(visuals == TRUE) %>%
#            count(state) %>%
#            slice_max(n, n=10),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="lightgreen") +
#     labs(x = "State", y = "Visual Sighting Reports", title = "Top 10 States for Visual Sightings", subtitle = "Illinois leads in reports of Sasquatch sightings") +
#     scale_fill_brewer(palette = "Set1") +
#   geom_text(aes(label= n), hjust = 1.5, color = "black") +
# #  theme_void() +
#     coord_flip()
# ggplot(bfro %>%
#          filter(sounds == TRUE) %>%
#            count(state) %>%
#            slice_max(n, n=10),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="lightgreen") +
#     labs(x = "State", y = "Vocal Reports", title = "Top 10 States for Vocal Encounters", subtitle = "Washington leads in reports of Sasquatch vocalization reports") +
#     scale_fill_brewer(palette = "Set1") +
#   # geom_text(aes(label= n), hjust = 1.5, color = "black") +
#   geom_text(
#     aes(label= paste0(state, ' - ', n),
#         hjust = ifelse(n > 35, 1.05, -0.15)),
#         color = "black") +
#   theme_void() +
#     coord_flip()
# ggplot(bfro %>%
#          filter(chatter == TRUE) %>%
#            count(state) %>%
#            slice_max(n, n=10),
#        aes(x = fct_rev(fct_infreq(state, n)), y = n)) +
#     geom_bar(stat='identity', color="black", fill="lightgreen") +
#     labs(x = "State", y = "Chatter Reports", title = "Top 10 States for Chattering", subtitle = "boop") +
#     scale_fill_brewer(palette = "Set1") +
#   geom_text(aes(label= n), hjust = 1.5, color = "black") +
# #  theme_void() +
#     coord_flip()
# Plot
# ggplot(bfro %>%
#            count(region),
#             aes(fill = region,
#                 area = n,
#                 label = n)) +
#   geom_treemap() +
#   geom_treemap_text(colour = "black",
#                     place = "centre") +
#   labs(title = "Bigfoot Reports by Region in the Continental US",
#        subtitle = "Pacific & Midwest Regions lead in Bigfoot Reports",
#        fill = "Region") +
#   theme(legend.position = "left") +
#   scale_fill_brewer(palette = "Pastel1")
# bfro1 <- bfro %>%
#   select(region, sounds, knocks, being_watched, quietude, rock_throw, footprints, chatter)
# ```
#
# ```{r}
# ggplot(bfro1 %>% filter(sounds == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports with Bigfoot Vocalizations or Other Sounds")
#
# ggplot(bfro1 %>% filter(knocks == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports featuring Knocking Sounds")
#
# ggplot(bfro1 %>% filter(being_watched == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports featuring Sensations of Being Watched")
#
# ggplot(bfro1 %>% filter(rock_throw == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports with Rock Throwing")
#
# ggplot(bfro1 %>% filter(quietude == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports where surroundings go quiet")
#
# ggplot(bfro1 %>% filter(footprints == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports with Bigfoot Footprints")
#
# ggplot(bfro1 %>% filter(chatter == TRUE), aes(x = region)) +
#   geom_bar() +
#   labs(title = "Bigfoot Reports with Chattering")
# library(tidytext)
# library(plyr)
# library(quanteda)
# library(quanteda.textplots)
# bf_corpus <- corpus(bfro$observed)
# bf_summary <- summary(bf_corpus)
# bf_summary
# bf_tokens <- tokens_tolower(tokens(bf_corpus, remove_punct = T, remove_numbers = T))
# bf_tokens1 <- tokens_select(bf_tokens,
#                             pattern = stopwords("en"),
#                             selection = "remove")
# bf_tokens1 <- tokens_replace(bf_tokens1,
#                              pattern = lexicon:: hash_lemmas$token,
#                              replacement = lexicon:: hash_lemmas$lemma)
# bf_dfm <- dfm(bf_tokens1)
# bf_dfm
# topfeatures(bf_dfm, 30)
# we can set a standard starting point though to ensure the same output.
# set.seed(1234)
#
#  draw the wordcloud
# textplot_wordcloud(bf_dfm, min_count = 500, random_order = FALSE)
# smaller_dfm <- dfm_trim(bf_dfm, min_termfreq = 50)
# smaller_dfm <- dfm_trim(smaller_dfm, min_docfreq = .25, docfreq_type = "prop")
#
# smaller_fcm <- fcm(smaller_dfm)
#
# dim(smaller_fcm)
# myFeatures <- names(topfeatures((smaller_fcm)))
# even_smaller_fcm <- fcm_select(smaller_fcm, pattern = myFeatures, selection = "keep")
# dim(even_smaller_fcm)
# size <- log(colSums(smaller_fcm))
#
# textplot_network(smaller_fcm, vertex_size = size/ max(size) * 3)
# library(corrplot)
#
# corrplot(cor(select_if(bfro, is.numeric)))
# ggplot(bfro, aes(x=region, y=visibility, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Visibility", x = "Region") +
#   ggtitle("Visibility & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=uv_index, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "UV Index", x = "Region") +
#   ggtitle("UV Index & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=pressure, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Pressure", x = "Region") +
#   ggtitle("Pressure & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=moon_phase, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Moon Phase", x = "Region") +
#   ggtitle("Moon Phase & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=cloud_cover, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Cloud Cover", x = "Region") +
#   ggtitle("Cloud Cover & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=humidity, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Humidity", x = "Region") +
#   ggtitle("Humidity & Region of Bigfoot Reports") +
#   coord_flip()
#
# ggplot(bfro, aes(x=region, y=dew_point, fill=visuals)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("orange", "violet")) +
#   labs(fill="Visual Sighting", y = "Dew Point", x = "Region") +
#   ggtitle("Dew Point & Region of Bigfoot Reports") +
#   coord_flip()
# Create time series chart, color-coded by region
# ggplot(bfro %>%
#          drop_na(date) %>%
#          group_by(region) %>%
#          count(year),
#        aes(x=year, y=n, group=region, color=region)) +
#   geom_line(size=0.75) +
#   labs(x="Year", y="Number of Bigfoot Reports", title="Bigfoot Reports Over Time, 2000-2021", color="Region") +
#   # geom_label(
#   #   label="South Central 2004: 80 reports",
#   #   x=2004,
#   #   y=75,
#   #   label.padding = unit(0.55, "lines"),
#   #   label.size = 0.35,
#   #   color = "black",
#   #   fill = "lavender"
#   # ) +
#   # geom_label(
#   #   label="New England 2016: 13 reports",
#   #   x=2010,
#   #   y=16,
#   #   label.padding = unit(0.55, "lines"),
#   #   label.size = 0.35,
#   #   color = "black",
#   #   fill = "turquoise"
#   # ) +
#   theme(legend.position = c(.90, .73)) +
#   scale_x_continuous(n.breaks=7)
# Create time series chart, color-coded by region
# bfro2 <- bfro %>%
#   group(region) %>%
#   count(year)
#
# ggplot(bfro2, aes(x=year, y=count(year))) +
#   geom_line(data=bfro, aes(group=region), color="orange3", size=0.5, alpha=0.5) +
#   geom_line(aes(color=region), color="blue4", size=1.1) +
#   scale_color_viridis_b() +
#   labs(x="Year", y="Number of Bigfoot Reports", title="Bigfoot Reports Over Time, 2000-2021", color="Region") +
#   theme(legend.position = c(.90, .73)) +
#   # scale_x_continuous(n.breaks=7) +
#   facet_wrap(~region)
# colnames(bfro1)
#
# # Being Watched Sensation by footprint report
# table(bfro1$footprints, bfro1$being_watched)
#
# # Being watched sensation by knocks
# table(bfro1$knocks, bfro1$being_watched)
#
# # Being watched sensation by rock throwing
# table(bfro1$rock_throw, bfro1$being_watched)
#
# # Being watched sensation by sounds
# table(bfro1$sounds, bfro1$being_watched)
#
# # Being watched sensation by quietude
# table(bfro1$quietude, bfro1$being_watched)
# ggplot(bfro, aes(fill=sounds, x=season)) +
#   geom_bar()
#
# ggplot(bfro %>% filter(being_watched == TRUE), aes(fill=season, x=region)) +
#   geom_bar() +
#   ggtitle("Reports of Feeling Watched")
#
# ggplot(bfro %>% filter(sounds == TRUE), aes(fill=season, x=region)) +
#   geom_bar() +
#   ggtitle("Reports of Sounds")
#
# ggplot(bfro %>% filter(rock_throw == TRUE), aes(fill=season, x=region)) +
#   geom_bar() +
#   ggtitle("Reports of Rock Throwing")
#
# ggplot(bfro %>% filter(knocks == TRUE), aes(fill=season, x=region)) +
#   geom_bar() +
#   ggtitle("Reports of Knocking")
# Slice top ten states from dataset, create hbar
ggplot(bfro %>%
count(state) %>%
slice_max(n, n=10),
aes(x = fct_rev(fct_infreq(state)), y = n)) +
geom_bar(stat='identity', color="black", fill="lightgreen") +
labs(x = "State", y = "Total Bigfoot Reports", title = "Top 10 States for Bigfoot Reports", subtitle = "Washington State leads in Bigfoot Reports") +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label= n), hjust = 1.5, color = "black") +
coord_flip()
state_table <- table(bfro %>% select(state))
state_df <- as.data.frame(state_table)
# merge data into map ----------------------------------------------------------
myMapBF<-merge(state_map,state_df, by.x="full", "state")
# prepare plot
base<-ggplot(myMapBF)
Bigfoot_Reports_Map <-base + geom_sf(aes(fill=Freq), color = "gray10") +
scale_fill_viridis_c("Total Reports") +
labs(title = "Bigfoot Reports by State",
legend = "legend title") +
theme_void() +
theme(legend.position = c(0.065, 0.65))
Bigfoot_Pres_Map <- base + geom_sf(aes(fill=Freq), color = "gray10") +
scale_fill_viridis_c("Total Reports") +
labs(title = "Bigfoot Reports by State",
legend = "Total Reports") +
theme_void() +
theme(legend.position = c(0.081, 0.65),
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black"),
text = element_text(size = 13),
plot.title = element_text(color = "black"))
Bigfoot_Pres_Map
ggsave("Bigfoot_Pres_Mappum.png", Bigfoot_Pres_Map, bg="white")
# ----------------------
# Frequency Table
# absoluteT = table(bfro$state)
#
# propT = prop.table(absoluteT)*100
#
# tableFreq=as.data.frame(absoluteT)
# names(tableFreq)=c("state","count")
# tableFreq$percent=as.vector(propT)
#
# myMapBF <- merge(state_map,tableFreq, by.x="full", "state")
#
# base<-ggplot(myMapBF)
#
# Bigfoot_Reports_PMap <-base + geom_sf(aes(fill=percent), color = "gray10") +
#   scale_fill_viridis_c("Total Reports") +
#   labs(title = "Bigfoot Reports by State",
#        legend = "legend title") +
#   theme_void()
#
# Bigfoot_Reports_PMap
state_table <- table(bfro %>% select(state))
state_df <- as.data.frame(state_table)
# merge data into map ----------------------------------------------------------
myMapBF<-merge(state_map,state_df, by.x="full", "state")
# prepare plot
base<-ggplot(myMapBF)
Bigfoot_Reports_Map <-base + geom_sf(aes(fill=Freq), color = "gray10") +
scale_fill_viridis_c("Total Reports") +
labs(title = "Bigfoot Reports by State",
legend = "legend title") +
theme_void() +
theme(legend.position = c(0.065, 0.65))
Bigfoot_Pres_Map <- base + geom_sf(aes(fill=Freq), color = "gray10") +
scale_fill_viridis_c("Total Reports") +
labs(title = "Bigfoot Reports by State",
legend = "Total Reports") +
theme_void() +
theme(legend.position = c(0.081, 0.65),
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black"),
text = element_text(size = 13),
plot.title = element_text(color = "black"))
Bigfoot_Pres_Map
ggsave("Bigfoot_Pres_Mappum.png", Bigfoot_Pres_Map, bg="white")
# ----------------------
# Frequency Table
# absoluteT = table(bfro$state)
#
# propT = prop.table(absoluteT)*100
#
# tableFreq=as.data.frame(absoluteT)
# names(tableFreq)=c("state","count")
# tableFreq$percent=as.vector(propT)
#
# myMapBF <- merge(state_map,tableFreq, by.x="full", "state")
#
# base<-ggplot(myMapBF)
#
# Bigfoot_Reports_PMap <-base + geom_sf(aes(fill=percent), color = "gray10") +
#   scale_fill_viridis_c("Total Reports") +
#   labs(title = "Bigfoot Reports by State",
#        legend = "legend title") +
#   theme_void()
#
# Bigfoot_Reports_PMap
library(ggridges)
senses_bfro <- bfro %>% drop_na(sense)
pres_elements <- ggplot(senses_bfro, aes(x=moon_phase, y=sense, color=sense, fill=sense)) +
geom_density_ridges(scale = 0.8) +
theme_ridges() +
labs(title = "Visual & Auditory Report Elements Over the Moon Cycle\n") +
theme(legend.position = "none",
axis.title = element_blank(),
axis.text = element_text(size=13, color = "black"),
plot.title.position = "plot") +
geom_vline(xintercept = 0.5, color="red4") +
scale_x_continuous(name="Moon Phase", limits = c(0,1), breaks = c(0, 0.25, 0.5, 0.75, 1), labels=c("0.00" = "New", "0.25" = "Waxing", "0.50" = "Full", "0.75" = "Waning", "1.00" = "New"))
# +
#   annotate(geom = 'text', color='gray10',
#            label="Waning", y=0.85, x=0.7, angle=0) +
#   annotate(geom = 'text', color='gray10',
#            label="Waxing", y=0.85, x=0.2, angle=0)
pres_elements
ggsave("pres_elements.png", pres_elements, bg="white")
moonhist <- ggplot(bfro, aes(x=moon_phase, fill="purple4")) +
geom_histogram(binwidth=0.01, color='black', fill="purple4", alpha=0.6, position = 'identity') +
labs(y='Reports', x='Moon Phase (Between New Moons)') +
ggtitle('Bigfoot Reports Over the Moon Cycle') +
theme_minimal() +
theme(text = element_text(size=13, color="black")) +
scale_x_continuous(labels=c("0.00" = "New", "0.25" = "Waxing", "0.50" = "Full", "0.75" = "Waning", "1.00" = "New"))
moonhist
ggsave("moonhist.png", moonhist, bg="white")
?theme()
moonhist <- ggplot(bfro, aes(x=moon_phase, fill="purple4")) +
geom_histogram(binwidth=0.01, color='black', fill="purple4", alpha=0.6, position = 'identity') +
labs(y='Reports', x='Moon Phase (Between New Moons)') +
ggtitle('Bigfoot Reports Over the Moon Cycle') +
theme_minimal() +
theme(text = element_text(size=13, color="black"),
axis.text = element_text(size=13)) +
scale_x_continuous(labels=c("0.00" = "New", "0.25" = "Waxing", "0.50" = "Full", "0.75" = "Waning", "1.00" = "New"))
moonhist
ggsave("moonhist.png", moonhist, bg="white")
View(bfro %>% filter(footprints == TRUE) %>% group_by(state))
View(bfro %>% filter(footprints == TRUE) %>% count(state))
fps <- bfro %>% filter(footprints == TRUE)
View(fps %>% count(state))
absoluteT <- table(fps$state)
propT = prop.table(absoluteT)*100
tableFreq = as.data.frame(absoluteT)
names(tableFreq)=c("state", "count")
tableFreq$percent=as.vector(propT)
View(tableFreq)
fps <- fps %>% filter(year > 1999)
absoluteT <- table(fps$state)
propT = prop.table(absoluteT)*100
tableFreq = as.data.frame(absoluteT)
names(tableFreq)=c("state", "count")
tableFreq$percent=as.vector(propT)
View(tableFreq)
fps1 <- bfro %>% filter(year > 1999) %>% count(state)
fps1 <- bfro %>% filter(year > 1999)
absoluteT <- table(fps1$state)
> propT = prop.table(absoluteT)*100
absoluteT <- table(fps1$state)
propT = prop.table(absoluteT)*100
tableFreq = as.data.frame(absoluteT)
names(tableFreq)=c("state", "count")
tableFreq$percent=as.vector(propT)
View(tableFreq)
fps <- bfro %>% group_by(moon_phase)
fps %>% count(moon_phase)
view(fps)
fps <- bfro %>% filter(!is.na(moon_phase)) %>% group_by(moon_phase)
fps %>% count(moon_phase)
view(fps)
fps <- bfro %>% filter(!is.na(moon_phase))
absoluteT <- table(fps$moon_phase)
propT = prop.table(absoluteT)*100
tableFreq = as.data.frame(absoluteT)
names(tableFreq)=c("moon_phase", "count")
tableFreq$percent=as.vector(propT)
View(tableFreq)
setwd("~/BF")
